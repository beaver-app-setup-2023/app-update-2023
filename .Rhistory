column(3,
div(uiOutput("plotmap1hover_info",style="font-size:14px; white-space: pre-wrap;color:beige; text-align:left;margin-bottom:0px;margin-left:0px;"))
),
column(3,
div(uiOutput("plotmap1_infosel",style="font-size:14px;white-space: pre-wrap;color:orange; text-align:left;margin-right:0px;")) ),
column(4,
br(),
div(style="display:inline-block;float:right", actionButton("pick_extent", " explore", icon= icon("check"), class = "btn-warning") )))
), # end sidebarPanel tab1
mainPanel(  shinyjs::useShinyjs(), width = 8,
br(),br(),br(),
fluidRow(
column(4, div("Candidate Release Area",style="font-size:23px;text-align:right;padding-top:20px;color:yellow;")),
column(5, div("Assess the area by displaying habitat and landscape features on the local map below. Select characteristics of the release operation. Double-click on the map to select release points. Click on the button to simulate initial settlement.",
style="font-size:13px;padding-left:2px;padding-right:30px;color:beige;")),
column(3,
div(style="display:inline-block;float:left", actionButton("start_sim", "Simulate settlement", icon= icon("otter"), class = "btn-danger")) )
),
hr(),
fluidRow(
column(8,# offset=1,
style = 'border-right: .5px solid; color:gray',
br(),
fluidRow(  column(12,
column(6, uiOutput("mapzoom_hover_info",style="font-size:14px;white-space: pre-wrap;color:#cccc99; text-align:left", style = "pointer-events: none"))
) )  ,
shinyWidgets::addSpinner(plotOutput("mapzoom", width="100%", dblclick = "plot_click2",
height="700px",
hover = hoverOpts("mapzoom_hover", delay = 100, delayType = "debounce", nullOutside=TRUE)),color = "yellow")),
##
column(4,
div("Translocation Parameters",style="font-size:23px;text-align:left;padding-top:10px;color:lightsalmon;")  ,
#     fluidRow( column(12,#offset=1,
div("Inform parameters for a single release session including up to 10 beaver families.",
style="font-size:13px;padding-left:0px;padding-right:0px;color:beige;"),#)),
br(),
fluidRow( column(9,  div("Groups of beavers released for the session: ",style="padding-left:20px;font-size:16px;text-align:left;padding-top:12px;color:lightsalmon;font-face:bold;")),
column(3,
numericInput(inputId="Nfams_init", label=NULL, value=3, min = 1,  max = 10, step = 1, width = "100%"),
tags$style(HTML('#Nfams_init{background-color:black; color:lightsalmon;text-align:center;}')))
),
fluidRow( column(12, div("Release protocol",style="padding-left:20px;font-size:16px;text-align:left;padding-top:12px;padding-bottom:4px;color:lightsalmon;font-face:bold;"))),
fluidRow( column(11,offset=1,
#  div(   shinyWidgets::prettyR
RadioButtons( inputId = "Nsites",label=NULL,#thick = FALSE,bigger=TRUE, shape="round",width="300px", inline=FALSE,
# choiceNames=list(expression("start boo from a single release point\n (locate on map with double-click)"),paste0("locate each release point on map\n(double-click for all locations)"),paste0("allocate random point locations across the extent\n(double-click to locate first point on map or resample)")),
choices = c("start from a single release point (locate on map)","locate each release point on map","allocate random point location across the extent (locate first point on map)"),
selected ="start from a single release point (locate on map)"),#,status = "danger" )   )
)),
tags$style(HTML('#Nsites{ padding-left:20px;color:lightsalmon;float: left; text-align: justify; margin: 0px;width:200px;background: #ffffff;display: block;}')),
tags$style(HTML('#demog{ padding-left:20px;color:lightsalmon}')),
tags$style(HTML('#Nfams{ padding-left:20px;color:lightsalmon}')),
br(),
fluidRow( column(8,  div("Demographics",style="padding-left:20px;font-size:16px;text-align:left;padding-top:12px;padding-bottom:4px;color:lightsalmon;font-face:bold;"))),
fluidRow( column(11, offset=1,
shinyWidgets::prettyRadioButtons( inputId = "demog",label=NULL,thick = FALSE,bigger=TRUE, shape="round",
choices = c("all adult pairs","some adult pairs, some families","all families"),
selected = "all adult pairs" ,status = "danger") )
),
br(),
hr(),
br(),
fluidRow(column(12,
column(3,
div(style="display:inline-block;float:center", actionButton("update_mapzoom_hab", "show",   class = "btn-success")),
shinyBS::bsTooltip("update_mapzoom_hab", "Display habitat and OS features on map.", "top", options = list(container = "body")) ),
column(9,     div("Visualise local landscape",style="font-size:23px;text-align:center;padding-top:2px;color:turquoise;")))),
br(),
fluidRow( column(12,
column(6,
shinyWidgets::prettyCheckboxGroup(inputId = "selected_layer_all" , label = "Habitat Suitability", choices = c("all") ,status = "primary",inline=TRUE,thick = FALSE,bigger=TRUE, shape="round"),
shinyWidgets::prettyCheckboxGroup(inputId = "selected_layer" ,  label = NULL, choices = c( "suitable","dispersal","unsuitable"), selected="suitable" ,status = "primary",inline=TRUE,thick = FALSE,bigger=TRUE, shape="round" ) ),
column(6,
shinyWidgets::prettyCheckboxGroup(inputId = "selected_OS_all" , label = "OS Features", choices = c("all","named places","all roads", "OS regions"), selected="all roads" ,status = "primary",inline=TRUE,thick = FALSE,bigger=TRUE, shape="round")) ) ),
br(),
fluidRow( column(12, column(3,column(6,br())))),
fluidRow( column(12, column(6,
shinyWidgets::prettyCheckboxGroup(inputId = "selected_OS1" , label=NULL,
choices = c("named places", "local altitude",
"a road", "b road", "primary road","minor road","road names","railway line" ),status = "primary",inline=TRUE,thick = FALSE,bigger=TRUE, shape="round" ) ),
column(6,
shinyWidgets::prettyCheckboxGroup(inputId = "selected_OS2" , label=NULL,
choices = c(  "woodland region","urban region","rivers line","lakes region","foreshor region", "marsh" ,
"TV or radio mast or tower","Wind powered generator"
),status = "primary",inline=TRUE,thick = FALSE,bigger=TRUE, shape="round" ) ))),
tags$style(HTML('#selected_OS1{ color:turquoise}')),
tags$style(HTML('#selected_OS2{ color:turquoise}')),
tags$style(HTML('#selected_OS_all{ color:turquoise}')),
tags$style(HTML('#selected_layer{ color:turquoise}')),
tags$style(HTML('#selected_layer_all{ color:turquoise}')),
br(),
hr()
))) #   mainPanel tab1
)), #   sidebarLayout,  tabPanel 1
####################################################################### tab 2
tabPanel(value="sim_tab" ,
div("Simulate range expansion",style="font-size:14px;"),
shinybusy::use_busy_bar(color = "yellow", height = "10px"),
fluidPage(
##################### title row tab 2
fluidRow(column(12,
column(4,   style = "background-color:black;",
div( "Initial settlement",style="padding-top:5px;padding-bottom:25px;text-align:center;font-size:22px;font-face:bold;"),
br(),
hr(),
fluidRow(column(5,
div( "Release site near ",style="text-align:left;font-size:14px;font-face:bold;padding-left:20px;color:yellow"),
div( "Beauly area.",style="text-align:left;font-size:14px;font-face:bold;font-style:italic;padding-left:20px;color:turquoise"),
br(),
textOutput("extent_infotext"),
tags$head(tags$style("#extent_infotext{color:beige;font-size:14px;white-space: pre-wrap;text-align:left;padding-left:20px; }")) ,
br(),  br(),  br(),
div(style="text-align:center;", actionButton("start_reruninit",  "re-run?" ,
icon= icon("otter"), class = "btn-danger"))
),
column(7,
shinyWidgets::addSpinner(plotOutput("mapsim_init", width="100%",
height="300px"  ),color = "turquoise"),
shinyWidgets::prettyCheckboxGroup(inputId ='sim_objective', '',  choices=c( "release points (initial)", "release points (relocated)", 'starting territories' ),  selected='starting territories', width="90%",
status = "primary",inline=TRUE,thick = FALSE,bigger=TRUE, shape="round"),
tags$head(tags$style("#sim_objective{color: turquoise;font-size:13px;background:black;text-align:left;padding-left:50px;}"))
)) ,
br()
),
###############################
column(7, offset=1 ,
fluidRow(
column(3,
br(),
div(style="display:inline-block;float:right;", actionButton("start_sim5yr",  "Simulate growth" ,
icon= icon("otter"), class = "btn-danger"))),
column(9,
div( "Simulated range expansion",style="padding-top:5px;text-align:left;padding-left:150px;font-size:22px;font-face:bold;")
,
tags$head( tags$style(HTML("
.tabbable ul li:nth-child(1) { float: left;  background-color: purple;}
.tabbable ul li:nth-child(2) { float: left;padding-left:500px;}
.tabbable ul li:nth-child(3) { float: left;}
.tabbable ul li:nth-child(4) { float: right;}"
)))
)),
tabsetPanel(  id="resTabs",
################ tab0 with dets?
tabPanel('?'  ),
################ tab1
tabPanel('year 3' , id="tab_y3",
br(),
column(4,#offset=1 ,
tags$div( "Population density map:" ,style="color:beige;text-align:left;font-size:15px;"),
tags$div( "simulated occupancy 3 years after translocation." ,style="color:beige;text-align:left;font-size:15px;"),
br(), br(),
tags$div(tags$div(  "Display simulated occupancy", tags$br(),  "out of 15 runs",tags$br() ), style="color:turquoise;font-size:13px;padding-left:30px;" ),
br(),
shinyWidgets::prettyCheckboxGroup ("plot_probability_range_y3",label=NULL,
choices=c( "1 to 3 runs","3 to 5 runs","5 to 10 runs"  , "10 to 15 runs"),
selected=c( "1 to 3 runs","3 to 5 runs","5 to 10 runs"  , "10 to 15 runs"),width="90%", inline=FALSE,status="warning", thick = FALSE,bigger=TRUE, shape="round"),
br(),
shinyWidgets::prettyCheckboxGroup ("plot_start_terr2",label=NULL,
choices=c( "starting territories", "release points"),  width="90%", inline=FALSE,status = "primary", thick = FALSE,bigger=TRUE, shape="round"),
tags$head(tags$style("#plot_probability_range_y3{color: turquoise;font-size:13px;padding-left:40px;}")) ,
tags$head(tags$style("#plot_start_terr2{color: turquoise;font-size:13px;padding-left:40px;}"))
) ,
column(8,
br(),
shinyWidgets::addSpinner(plotOutput("mapsim3", width="100%",
height="400px" ),color = "yellow"),
div(p( "Summary values include 15 simulations considering similar initial territories.",style="color: turquoise;text-align:right;font-size:13px;")))
),
################ tab2
tabPanel('year 5', br(),
column(4,#offset=1 ,
tags$div( "Population density map:" ,style="color:beige;text-align:left;font-size:15px;"),
tags$div( "simulated occupancy 5 years after translocation." ,style="color:beige;text-align:left;font-size:15px;"),
br(), br(),
tags$div(tags$div(  "Display simulated occupancy", tags$br(),  "out of 15 runs"  ), style="color:turquoise;font-size:13px;padding-left:30px;" ),
br(),
shinyWidgets::prettyCheckboxGroup ("plot_probability_range_y5",label= NULL,
choices=c( "1 to 3 runs","3 to 5 runs","5 to 10 runs"  , "10 to 15 runs"),
selected=c( "1 to 3 runs","3 to 5 runs","5 to 10 runs"  , "10 to 15 runs"),
width="90%", inline=FALSE,status="warning", thick = FALSE,bigger=TRUE, shape="round"),
br(),
shinyWidgets::prettyCheckboxGroup ("plot_start_terr2",label=NULL,
choices=c( "starting territories", "release points"),  width="90%", inline=FALSE,status = "primary", thick = FALSE,bigger=TRUE, shape="round"),
tags$head(tags$style("#plot_probability_range_y5{color:turquoise;font-size:13px;padding-left:40px;}")) ,
tags$head(tags$style("#plot_start_terr2{color:turquoise;font-size:13px;padding-left:40px;}"))
),
column(8,
br(),
shinyWidgets::addSpinner(plotOutput("mapsim", width="100%",
height="400px" ),color = "yellow"),
div(p( "Summary values include 15 simulations considering similar initial territories.",style="color: turquoise;text-align:right;font-size:13px;")))
),
################ tab3
tabPanel('summary table',
br(),
br(),
tableOutput("res_table" ) ,
div(p( "Summary values include 15 simulations considering similar initial territories.",style="color: turquoise;text-align:right;font-size:13px;"))
),
)# tabsetPanel
)
)# col 12
)
runApp()
runApp()
rsconnect::setAccountInfo(name='naturalandenvironmentalscience', token='03E2DBCC6228F125D9432018F0E237B3', secret='eMpa7Wd56xVkEsMJkch1tjamn3wcwJ6tAc1cO3T1')
rsconnect::deployApp('D:/Beavers 2022 App/Beavers 2022 App',     appName = "BeavsReloc_large",     account ='naturalandenvironmentalscience')
here::here("/data_init/UKbound.shp" )
here::here()
st_read(paste0(here::here()."/data_init/UKbound.shp" ))$geometry
st_read(paste0(here::here(),"/data_init/UKbound.shp" ))$geometry
rsconnect::deployApp('D:/Beavers 2022 App/Beavers 2022 App',     appName = "BeavsReloc_large",     account ='naturalandenvironmentalscience')
rsconnect::deployApp('D:/Beavers 2022 App/Beavers 2022 App',     appName = "BeavsReloc_large",     account ='naturalandenvironmentalscience')
rsconnect::deployApp('D:/Beavers 2022 App/Beavers 2022 App',     appName = "BeavsReloc_large",     account ='naturalandenvironmentalscience')
rsconnect::deployApp('D:/Beavers 2022 App/Beavers 2022 App',     appName = "BeavsReloc_large",     account ='naturalandenvironmentalscience')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
rsconnect::deployApp('D:/Beavers 2022 App/Beavers 2022 App',     appName = "BeavsReloc_large",     account ='naturalandenvironmentalscience')
shiny::runApp()
runApp()
runApp()
runApp()
setwd("D:/Beavers 2022 App/Beavers 2022 App")
runApp()
runApp()
rm(list=ls())
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
?spatstat.core::rSSI
?spatstat.core::SSI
runApp()
Vinf <- rSSI(0.07)
V100 <- rSSI(0.07, 100)
X <- runifpoint(100)
Y <- rSSI(0.03,142,x.init=X) # Y consists of X together with
# 42 added points.
plot(Y, main="rSSI")
plot(X,add=TRUE,chars=20,cols="red")
## inhomogeneous
Z <- rSSI(0.07, 50, f=function(x,y){x})
plot(Z)
Y
attr(Y)
str(Y)
runApp()
gc()
getwd()
library(rsconnect)
rsconnect::setAccountInfo(name='naturalandenvironmentalscience', token='03E2DBCC6228F125D9432018F0E237B3', secret='eMpa7Wd56xVkEsMJkch1tjamn3wcwJ6tAc1cO3T1')
rsconnect::deployApp('D:/Beavers 2022 App/Beavers 2022 App',     appName = "BeavsReloc_large",     account ='naturalandenvironmentalscience')
runApp()
runApp()
runApp()
rsconnect::deployApp('D:/Beavers 2022 App/Beavers 2022 App',     appName = "BeavsReloc_large",     account ='naturalandenvironmentalscience')
rsconnect::deployApp('D:/Beavers 2022 App/Beavers 2022 App',     appName = "BeavsReloc_large",     account ='naturalandenvironmentalscience')
writeOGR(obj=UKbound, dsn=my_dsn, layer="BufferedTracks", driver="ESRI Shapefile")
library(rgdal)
writeOGR(obj=UKbound, dsn=my_dsn, layer="BufferedTracks", driver="ESRI Shapefile")
my_dsn <- paste0(file.path(tmp.path, "BufferedTracks.shp")
)
my_dsn <- paste0(file.path(tempdir(), "BufferedTracks.shp"))
my_dsn
my_dsn <- paste0(file.path(tempdir(), "BufferedTracks.shp"))
sf::st_write(UKbound, dsn =  my_dsn,
driver = "ESRI Shapefile", quiet = TRUE)
UKbound
SuitLayer
sf::st_write(SuitLayer, dsn =  my_dsn,
driver = "ESRI Shapefile", quiet = TRUE)
shiny::runApp()
# shapefiles
my_dsn <- paste0(file.path(tempdir(), "SimMaps_",format(Sys.time(),paste0("%d%b%y_%H%M")),".shp"))
sf::st_write(SuitLayer, dsn =  my_dsn,
driver = "ESRI Shapefile", quiet = TRUE)
my_dsn
format(Sys.time(),paste0("%d%b%y_%H%M"))
# shapefiles
my_dsn <- paste0(file.path(tempdir()), "SimMaps_",format(Sys.time(),paste0("%d%b%y_%H%M"),".shp"))
my_dsn
paste0(file.path(tempdir() , "SimMaps_",format(Sys.time(),paste0("%d%b%y_%H%M"),".shp")))
# shapefiles
my_dsn <- paste0(file.path(tempdir() , "SimMaps_",format(Sys.time(),paste0("%d%b%y_%H%M")),".shp"))
sf::st_write(SuitLayer, dsn =  my_dsn,
driver = "ESRI Shapefile", quiet = TRUE)
my_dsn
# shapefiles
my_dsn <- paste0(file.path(tempdir()) , "SimMaps_",format(Sys.time(),paste0("%d%b%y_%H%M")),".shp")
my_dsn
# shapefiles
my_dsn <- paste0(file.path(tempdir()) , "/SimMaps_",format(Sys.time(),paste0("%d%b%y_%H%M")),".shp")
sf::st_write(SuitLayer, dsn =  my_dsn,
driver = "ESRI Shapefile", quiet = TRUE)
runApp()
my_dsn
paste0(file.path(tempdir()) , "/SimMaps_",format(Sys.time(),paste0("%d%b%y_%H%M")))
tempdir()
list.files(tempdir(),pattern=format(Sys.time(),paste0("%d%b%y_%H%M")))
tempdir()
runApp()
runApp()
Sys.time(),paste0("%d%b%y_%H%M")
format(Sys.time(),paste0("%d%b%y_%H%M"))
str_replace_all("lsidhfv  7sdf&&", "[^[A-Za-z1-9,]]", "") %>% str_squish(.)
runApp()
do.call("rbind",rvsim$chull_y3_all)
test <- list(UKbound,UKbound)
test
do.call("rbind",test)
st_as_sf(do.call("rbind",test))
unlist(test)
do.call("rbind",test)
unlist(do.call("rbind",test))
test <- list(SuitLayer)
tes
test
test <- list(SuitLayer$geometry)
test <- list(SuitLayer$geometry,SuitLayer$geometry,SuitLayer$geometry)
unlist(do.call("rbind",test))
do.call("rbind",test)
st_AS_SF(do.call("rbind",test))
st_as_sf(do.call("rbind",test))
do.call("c",test)
st_as_sf(do.call("c",test))
test$Nruns <-  c("1 to 15 runs","3 to 15 runs","5 to 15 runs"  , "10 to 15 runs")
test
test <-st_as_sf(do.call("c",rvsim$chull_y5_all))
st_as_sf(do.call("c",test))
test
test <- list(SuitLayer$geometry,SuitLayer$geometry,SuitLayer$geometry)
st_as_sf(do.call("c",test))
test <- st_as_sf(do.call("c",test))
test$Nruns <-  c("1 to 15 runs","3 to 15 runs","5 to 15 runs"  , "10 to 15 runs")
test$Nruns <-  c("1 to 15 runs","3 to 15 runs","5 to 15 runs"  )
rbind(test,test)
runApp()
format(as.Date(Sys.Date(), "%y-%m-%d"), "%B %Y")
format(as.Date(Sys.Date(), "%y-%m-%d"), "%d %B %Y")
paste0( 'Outputs generated on ",format(as.Date(Sys.Date(), "%y-%m-%d"), "%d %B %Y"),
" from simulations of a beaver individual-based model processed within a shiny App available from https://naturalandenvironmentalscience.shinyapps.io/BeavsReloc_large/ \n developed by .zelda. at the University of Newcastle for NatureScot (2022).'))
paste0( "Outputs generated on ",format(as.Date(Sys.Date(), "%y-%m-%d"), "%d %B %Y"),
" from simulations of a beaver individual-based model processed within a shiny App available from
https://naturalandenvironmentalscience.shinyapps.io/BeavsReloc_large/","\n developed by .zelda. at the University of Newcastle for NatureScot (2022).")
paste0( "Outputs generated on ",format(as.Date(Sys.Date(), "%y-%m-%d"), "%d %B %Y"),
" from simulations of a beaver individual-based model processed within a shiny App available from",
"https://naturalandenvironmentalscience.shinyapps.io/BeavsReloc_large/",
"developed by .zelda. at the University of Newcastle for NatureScot (2022).")
paste0( "Outputs generated on ",format(as.Date(Sys.Date(), "%y-%m-%d"), "%d %B %Y"),
" from simulations of a beaver individual-based model processed within a shiny App available from ", \n,
"https://naturalandenvironmentalscience.shinyapps.io/BeavsReloc_large/",
"developed by .zelda. at the University of Newcastle for NatureScot (2022).")
paste0( "Outputs generated on ",format(as.Date(Sys.Date(), "%y-%m-%d"), "%d %B %Y"),
" from simulations of a beaver individual-based model processed within a shiny App available from ", "\n",
"https://naturalandenvironmentalscience.shinyapps.io/BeavsReloc_large/",
"developed by .zelda. at the University of Newcastle for NatureScot (2022).")
paste0( "Outputs generated on ",format(as.Date(Sys.Date(), "%y-%m-%d"), "%d %B %Y"),
" from simulations of a beaver individual-based model processed within a shiny App available from ", "/n",
"https://naturalandenvironmentalscience.shinyapps.io/BeavsReloc_large/",
"developed by .zelda. at the University of Newcastle for NatureScot (2022).")
paste0( "Outputs generated on ",format(as.Date(Sys.Date(), "%y-%m-%d"), "%d %B %Y"),
" from simulations of a beaver individual-based model processed within a shiny App available from ", "/n",
"https://naturalandenvironmentalscience.shinyapps.io/BeavsReloc_large/",
"developed by .zelda. at the University of Newcastle for NatureScot (2022).")
c("\n",paste0( "Outputs generated on ",format(as.Date(Sys.Date(), "%y-%m-%d"), "%d %B %Y"),
" from simulations of a beaver individual-based model processed within a shiny App available from ", "/n",
"https://naturalandenvironmentalscience.shinyapps.io/BeavsReloc_large/",
"developed by .zelda. at the University of Newcastle for NatureScot (2022).")     )
paste("\n",paste0( "Outputs generated on ",format(as.Date(Sys.Date(), "%y-%m-%d"), "%d %B %Y"),
" from simulations of a beaver individual-based model processed within a shiny App available from ", "/n",
"https://naturalandenvironmentalscience.shinyapps.io/BeavsReloc_large/",
"developed by .zelda. at the University of Newcastle for NatureScot (2022).")     )
c("#########################",paste0( "Outputs generated on ",format(as.Date(Sys.Date(), "%y-%m-%d"), "%d %B %Y"),
" from simulations of a beaver individual-based model processed within a shiny App available from ", "/n",
"https://naturalandenvironmentalscience.shinyapps.io/BeavsReloc_large/",
"developed by .zelda. at the University of Newcastle for NatureScot (2022).")     )
ttext <- c("#########################",paste0( "Outputs generated on ",format(as.Date(Sys.Date(), "%y-%m-%d"), "%d %B %Y"),
" from simulations of a beaver individual-based model processed within a shiny App available from ", "/n",
"https://naturalandenvironmentalscience.shinyapps.io/BeavsReloc_large/",
"developed by .zelda. at the University of Newcastle for NatureScot (2022).")     )
write.txt(ttext)
write.csv(ttext)
write.csv(ttext, "tt.txt"))
write.csv(ttext, "tt.txt")
write.csv(ttext, "tt.txt" , sep = "\t",
row.names = FALSE, col.names = NA)
txt_init <-  paste0( "The simulated release included ",Nfamstext , input$demog,").\n\n", rvtext1$famsettled_text,
"\n\nThe initial (settled) population contains ",rvsim$Ngroups ," groups, or a total of ", rvsim$Nads+rvsim$Nyoungs ," beavers (", rvsim$Nads, " adults + ",rvsim$Nyoungs," young).\n\n",
rvsim$Nfams_w2Young+ rvsim$Nfams_wYoung  ," groups are with young (",rvsim$Nfams_w2Young, " with 2 young and ", rvsim$Nfams_wYoung, " with 1 young).")
txt_intro <- paste0( "Outputs generated on ",format(as.Date(Sys.Date(), "%y-%m-%d"), "%d %B %Y"),
" from simulations of a beaver individual-based model processed within a shiny App available from ",
"https://naturalandenvironmentalscience.shinyapps.io/BeavsReloc_large/",
" developed by .zelda. at the University of Newcastle for NatureScot (2022).")
txt_sep <- c("#############################################")
c(txt_sep,txt_intro, txt_sep, txt_init,txt_sep)
txt_intro
c(txt_intro, txt_sep, txt_init,txt_sep)
c(txt_sep,txt_intro, txt_sep,)
c(txt_sep,txt_intro, txt_sep)
write.csv(txt_out, "tt.txt" , sep = "\n", row.names = FALSE, col.names = NA)
write.csv(ttext, "tt.txt" , sep = "\n", row.names = FALSE, col.names = NA)
txt_intro <- paste0( "Outputs generated on ",format(as.Date(Sys.Date(), "%y-%m-%d"), "%d %B %Y"),
" from simulations of a beaver individual-based model processed within a shiny App available from ",
"https://naturalandenvironmentalscience.shinyapps.io/BeavsReloc_large/",
" developed by .zelda. at the University of Newcastle for NatureScot (2022).", sep= "\n")
txt_intro
, "tt.txt" , sep = "\n", row.names = FALSE, col.names = NA)
write.csv(ttext, "tt.txt" , sep = "\n", row.names = FALSE, col.names = NA)
runApp()
tempdir()
list.files(tempdir())
unlink(tempdir(), recursive = T)
list.files(tempdir())
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
format(as.Date(Sys.Date(), "%y-%m-%d"), "%d %B %Y")
format(Sys.time(), "%d%M%y")
format(Sys.time(), "%d%b%y")
format(Sys.time(), "%d%b%y_")
format(Sys.time(), "%d%b%y_%H")
format(Sys.time(), "%d%b%y_%H%M")
runApp()
list.files(tempdir())
file.remove(tempdir())
unlink(tempdir())
list.files(tempdir())
unlink(tempdir(), recursive=T)
list.files(tempdir())
runApp()
format(Sys.time(), "%d%b%y_%H%M")
format(Sys.time(), "%d%b%y_%H%M")
runApp()
format(Sys.time(), "%d%b%y_%H%M")
runApp()
format(Sys.time(), "%d%b%y_%H%M")
paste0(format(Sys.time(), "%d%b%y_%H%M"))
library(rsconnect)
rsconnect::setAccountInfo(name='naturalandenvironmentalscience', token='03E2DBCC6228F125D9432018F0E237B3', secret='eMpa7Wd56xVkEsMJkch1tjamn3wcwJ6tAc1cO3T1')
rsconnect::deployApp('D:/Beavers 2022 App/Beavers 2022 App',     appName = "ScotBeaverTranslocation",     account ='naturalandenvironmentalscience')
?unlink
rsconnect::deployApp('D:/Beavers 2022 App/Beavers 2022 App',     appName = "ScotBeaverTranslocation",     account ='naturalandenvironmentalscience')
rsconnect::deployApp('D:/Beavers 2022 App/Beavers 2022 App',     appName = "ScotBeaverTranslocation",     account ='naturalandenvironmentalscience')
extra_HabLayers
extra_HabLayers <- rbind(st_read( here::here("data2/extra_HabLayers_damcap_hi.shp")),st_read( here::here("data2/extra_HabLayers_damcap_occ.shp")),st_read(here::here("data2/extra_HabLayers_catch.shp")))
source("D:/Beavers 2022 App/Beavers 2022 App/appFunctions.R")
extra_HabLayers <- rbind(st_read( here::here("data2/extra_HabLayers_damcap_hi.shp")),st_read( here::here("data2/extra_HabLayers_damcap_occ.shp")),st_read(here::here("data2/extra_HabLayers_catch.shp")))
st_crs( extra_HabLayers ) <- mercproj
extra_HabLayers <- st_transform( extra_HabLayers,mercproj)
extra_HabLayers
st_read( here::here("data2/extra_HabLayers_damcap_hi.shp"))
st_read( here::here("data2/extra_HabLayers_damcap_occ.shp"))
st_read(here::here("data2/extra_HabLayers_catch.shp"))
cc <-st_read(here::here("data2/extra_HabLayers_catch.shp"))
cc
catch <- st_sf(geometry=  st_read( paste0("./data2/catch.shp"))  $geometry , layer="main catchments")
catch <- st_transform(catch, mercproj)
catch
st_union(catch)
catch <- st_sf(geometry=   st_union(st_read( paste0("./data2/catch.shp")) ) , layer="main catchments")
catch <- st_transform(catch, mercproj)
catch
intcatch
################# catchment maps - precut to extent beauly affric
intcatch <- st_sf(geometry=   st_read( paste0("./data2/intcatch.shp") ) $geometry , layer="water body intercatchments")
intcatch
################# catchment maps - precut to extent beauly affric
intcatch <- st_sf(geometry=  st_union( st_read( paste0("./data2/intcatch.shp") ) ) , layer="water body intercatchments")
catch <- st_sf(geometry=   st_union(st_read( paste0("./data2/catch.shp")) ) , layer="main catchments")
catch <- st_transform(catch, mercproj)
intcatch<- st_transform(intcatch, mercproj)
catch
intcatch
rbind(catch,intcatch )
#damcap_lo <- st_transform(damcap_lo, mercproj)
extra_HabLayers_catch   <- rbind(catch,intcatch )
st_write(extra_HabLayers_catch, here::here("data2/extra_HabLayers_catch.shp") , append=FALSE)
extra_HabLayers <- rbind(st_read( here::here("data2/extra_HabLayers_damcap_hi.shp")),st_read( here::here("data2/extra_HabLayers_damcap_occ.shp")),
st_read(here::here("data2/extra_HabLayers_catch.shp")))
extra_HabLayers <- st_transform( extra_HabLayers,mercproj)
extra_HabLayers
st_buffer(extra_HabLayers,45)
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
scotbound <-  st_read("./data2/scotbound.shp" )$geometry
runApp()
shiny::runApp()
git remote add origin https://github.com/zeldavanderwaal/Scotland-Beaver-App.git
install.packages("designer")
library(designer)
designer:::designApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
